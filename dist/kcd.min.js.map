{"version":3,"sources":["kcd.min.js"],"names":["angular","module","directive","$parse","transclude","link","scope","$el","attrs","ctrls","compile","clone","clonedScope","previousElements","append","recompile","remove","empty","$watch","kcdRecompile","_new","_old","useBoolean","hasOwnProperty","assign"],"mappings":"AAAAA,QAAQC,OAAO,OAAO,mBACtBD,QAAQC,OAAO,qBAEfD,QAAQC,OAAO,kBACZC,UAAU,gBAAiB,SAAU,SAAUC,GAC9C,OACEC,YAAY,EACZC,KAAM,SAAcC,EAAOC,EAAKC,EAAOC,EAAOL,GAK5C,QAASM,KACPN,EAAWE,EAAO,SAAUK,EAAOC,GAGjCC,EAAmBF,EACnBJ,EAAIO,OAAOH,KAIf,QAASI,KACHF,IACFA,EAAiBG,SACjBH,EAAmB,KACnBN,EAAIU,SAGNP,IApBF,GAAIG,EAEJH,KAqBAJ,EAAMY,OAAOV,EAAMW,aAAc,SAAUC,EAAMC,GAC/C,GAAIC,GAAad,EAAMe,eAAe,gBACjCD,GAAgBF,GAAiB,UAATA,KAAwBE,GAAgBF,GAAQA,IAASC,KAIlFC,GACFnB,EAAOK,EAAMW,cAAcK,OAAOlB,GAAO,GAG3CS,MAC8C,gBAAtCZ,GAAOK,EAAMW,cAAcb","file":"kcd.min.js","sourcesContent":["angular.module('kcd',['kcd.directives']);\nangular.module('kcd.directives', []);\n\nangular.module('kcd.directives')\n  .directive('kcdRecompile', ['$parse', function ($parse) {\n    return {\n      transclude: true,\n      link: function link(scope, $el, attrs, ctrls, transclude) {\n        var previousElements;\n\n        compile();\n\n        function compile() {\n          transclude(scope, function (clone, clonedScope) {\n            // transclude creates a clone containing all children elements;\n            // as we assign the current scope as first parameter, the clonedScope is the same\n            previousElements = clone;\n            $el.append(clone);\n          });\n        }\n\n        function recompile() {\n          if (previousElements) {\n            previousElements.remove();\n            previousElements = null;\n            $el.empty();\n          }\n\n          compile();\n        }\n\n        scope.$watch(attrs.kcdRecompile, function (_new, _old) {\n          var useBoolean = attrs.hasOwnProperty('useBoolean');\n          if ((useBoolean && (!_new || _new === 'false')) || (!useBoolean && (!_new || _new === _old))) {\n            return;\n          }\n          // reset kcdRecompile to false if we're using a boolean\n          if (useBoolean) {\n            $parse(attrs.kcdRecompile).assign(scope, false);\n          }\n\n          recompile();\n        }, typeof $parse(attrs.kcdRecompile)(scope) === 'object');\n      }\n    };\n  }]);\n"],"sourceRoot":"/source/"}